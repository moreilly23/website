[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Website",
    "section": "",
    "text": "GEORGE WASHINGTON UIVERSITY"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Website",
    "section": "SKILLS",
    "text": "SKILLS\nWriting Reporting"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Welcome to my portfolio! Here is a look at some recent work."
  },
  {
    "objectID": "portfolio.html#four-storied",
    "href": "portfolio.html#four-storied",
    "title": "Portfolio",
    "section": "Four storied",
    "text": "Four storied\nHere is a link to a major reporting assignment I did this past summer: https://fourstoried.com/\nFourStoried was a joint media venture between GWU and WVU that focused on community reporting. I covered two discint communities, the West Side neighborhood in Charleston, WV, and the LGBTQ in Dupont Circle/ADMO. The central focus in this project was to prioritize the subjects and allow them to voice concerns regarding issues they felt their respective communities were facing."
  },
  {
    "objectID": "portfolio.html#visual",
    "href": "portfolio.html#visual",
    "title": "Portfolio",
    "section": "Visual",
    "text": "Visual\nBelow is a link to visual work that I have worked on, which includes video, audio, and visual graphics.\nhttps://milesoreilly.weebly.com/"
  },
  {
    "objectID": "walkie.html",
    "href": "walkie.html",
    "title": "Walkthrough",
    "section": "",
    "text": "# run this line below load the data for this assignment\n# we'll use a built-in dataset from the ggplot2 package (loaded as party of the tidyverse)\nhousesales <- ggplot2::txhousing\n\n# This dataset includes monthly housing sales by city in the state of texas from 2000-2015.\n# let's take a look at it\nhousesales\n\n# A tibble: 8,602 × 9\n   city     year month sales   volume median listings inventory  date\n   <chr>   <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Abilene  2000     1    72  5380000  71400      701       6.3 2000 \n 2 Abilene  2000     2    98  6505000  58700      746       6.6 2000.\n 3 Abilene  2000     3   130  9285000  58100      784       6.8 2000.\n 4 Abilene  2000     4    98  9730000  68600      785       6.9 2000.\n 5 Abilene  2000     5   141 10590000  67300      794       6.8 2000.\n 6 Abilene  2000     6   156 13910000  66900      780       6.6 2000.\n 7 Abilene  2000     7   152 12635000  73500      742       6.2 2000.\n 8 Abilene  2000     8   131 10710000  75000      765       6.4 2001.\n 9 Abilene  2000     9   104  7615000  64500      771       6.5 2001.\n10 Abilene  2000    10   101  7040000  59300      764       6.6 2001.\n# … with 8,592 more rows\n\n# You can also see it in the view window by running this line\nView(housesales)\n\n\n# FOR EACH OF THE QUESTIONS BELOW, WRITE YOUR WORKING R CODE TO RETURN THE REQUESTED RESULTS\n# USE COMMENTS (PREFACED BY THE #) TO ACCOMPANY YOUR CODE TO EXPLAIN WHAT YOU'RE DOING \n# FOR EACH STEP AS NEEDED\n\n\n# 1) The column \"year\" indicates the year. Filter to return only results from 2015. \n# (note that because the column is numeric, you wouldn't use quotes as with text when setting your filter value)\n\nfilter(housesales, year == 2015)\n\n# A tibble: 322 × 9\n   city      year month sales   volume median listings inventory  date\n   <chr>    <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Abilene   2015     1   158 23486998 134100      801       4.4 2015 \n 2 Abilene   2015     2   151 19834263 126500      767       4.1 2015.\n 3 Abilene   2015     3   198 31869437 136800      821       4.4 2015.\n 4 Abilene   2015     4   201 28301159 129600      891       4.7 2015.\n 5 Abilene   2015     5   199 31385757 144700      919       4.8 2015.\n 6 Abilene   2015     6   260 41396230 141500      965       5   2015.\n 7 Abilene   2015     7   268 45845730 148700      986       5   2016.\n 8 Amarillo  2015     1   204 33188726 138500     1120       4.3 2015 \n 9 Amarillo  2015     2   188 34355428 149400     1084       4.2 2015.\n10 Amarillo  2015     3   317 53603130 140900     1051       3.9 2015.\n# … with 312 more rows\n\n# 2) Similar to the above question, filter results from 2010 onward, so 2010-2015.\n\nhousesales %>%\n  filter(between(year,2010,2015))\n\n# A tibble: 3,082 × 9\n   city     year month sales   volume median listings inventory  date\n   <chr>   <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Abilene  2010     1    73  9130783 112200      868       6.4 2010 \n 2 Abilene  2010     2    93 10372904  98300      830       6.1 2010.\n 3 Abilene  2010     3   133 16517713 114000      854       6.3 2010.\n 4 Abilene  2010     4   161 18788002 103600      859       6.3 2010.\n 5 Abilene  2010     5   200 22804393  99300      914       6.5 2010.\n 6 Abilene  2010     6   169 23216943 127900      932       6.7 2010.\n 7 Abilene  2010     7   159 22363123 127300      915       6.6 2010.\n 8 Abilene  2010     8   144 17504580 122000      936       6.7 2011.\n 9 Abilene  2010     9   116 15475763 121300      899       6.5 2011.\n10 Abilene  2010    10   111 14570529 111900      863       6.4 2011.\n# … with 3,072 more rows\n\n\n\n# 3) The \"city\" column contains the relevant city. Filter to return only results for Houston\n# (note, remember R is case sensitive)\n\nhousesales %>%\n  filter(city == \"Houston\")\n\n# A tibble: 187 × 9\n   city     year month sales    volume median listings inventory  date\n   <chr>   <int> <int> <dbl>     <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Houston  2000     1  2653 381805283 102500    16768       3.9 2000 \n 2 Houston  2000     2  3687 536456803 110300    16933       3.9 2000.\n 3 Houston  2000     3  4733 709112659 109500    17058       3.9 2000.\n 4 Houston  2000     4  4364 649712779 110800    17716       4.1 2000.\n 5 Houston  2000     5  5215 809459231 112700    18461       4.2 2000.\n 6 Houston  2000     6  5655 887396592 117900    18959       4.3 2000.\n 7 Houston  2000     7  5009 770284031 118300    19391       4.4 2000.\n 8 Houston  2000     8  5134 800032008 114600    19534       4.5 2001.\n 9 Houston  2000     9  4262 671716256 115900    19558       4.5 2001.\n10 Houston  2000    10  4068 621419904 112400    19752       4.5 2001.\n# … with 177 more rows\n\n# 4) Filter for only where the city is Houston as above, and now also filter for only \n# the year 2010. The results should give you 12 records, one for each month in 2010 for Houston.\n\nhousesales %>%\n  filter(city == \"Houston\", year == 2010)\n\n# A tibble: 12 × 9\n   city     year month sales     volume median listings inventory  date\n   <chr>   <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Houston  2010     1  2856  544338012 142300    31581       6.3 2010 \n 2 Houston  2010     2  3684  731357757 146500    32695       6.6 2010.\n 3 Houston  2010     3  5389 1116539769 152300    34880       6.9 2010.\n 4 Houston  2010     4  5932 1191105918 151800    34555       6.7 2010.\n 5 Houston  2010     5  6335 1289709166 152500    36724       7   2010.\n 6 Houston  2010     6  6117 1324315238 156800    39303       7.5 2010.\n 7 Houston  2010     7  4719 1028687548 157100    40409       7.9 2010.\n 8 Houston  2010     8  4691  994092936 156900    40154       8   2011.\n 9 Houston  2010     9  4355  915074585 153200    39159       7.9 2011.\n10 Houston  2010    10  4075  824541611 148400    38114       7.9 2011.\n11 Houston  2010    11  3924  842238262 150100    37031       7.8 2011.\n12 Houston  2010    12  4730 1028424811 157500    34971       7.4 2011.\n\n\n\n# 5) Build on what you've done above. Filter for only where the city is Houston as above, \n# and the year is 2010. Now add a sort using arrange() to sort the results based on the number\n# of home sales (the \"sales\" column) from most to least.\n\nhouston=filter(housesales, city == \"Houston\", year == 2010)\narrange(houston, desc(sales))\n\n# A tibble: 12 × 9\n   city     year month sales     volume median listings inventory  date\n   <chr>   <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Houston  2010     5  6335 1289709166 152500    36724       7   2010.\n 2 Houston  2010     6  6117 1324315238 156800    39303       7.5 2010.\n 3 Houston  2010     4  5932 1191105918 151800    34555       6.7 2010.\n 4 Houston  2010     3  5389 1116539769 152300    34880       6.9 2010.\n 5 Houston  2010    12  4730 1028424811 157500    34971       7.4 2011.\n 6 Houston  2010     7  4719 1028687548 157100    40409       7.9 2010.\n 7 Houston  2010     8  4691  994092936 156900    40154       8   2011.\n 8 Houston  2010     9  4355  915074585 153200    39159       7.9 2011.\n 9 Houston  2010    10  4075  824541611 148400    38114       7.9 2011.\n10 Houston  2010    11  3924  842238262 150100    37031       7.8 2011.\n11 Houston  2010     2  3684  731357757 146500    32695       6.6 2010.\n12 Houston  2010     1  2856  544338012 142300    31581       6.3 2010 \n\n# 6) Piggyback on what you've done above. \n# Do the same as #5, only this time instead of Houston return records for Dallas\n\ndallas=filter(housesales, city == \"Dallas\", year == 2010)\narrange(dallas, desc(sales))\n\n# A tibble: 12 × 9\n   city    year month sales     volume median listings inventory  date\n   <chr>  <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Dallas  2010     5  4891 1025677623 161900    25680       6.4 2010.\n 2 Dallas  2010     4  4791 1005356810 160100    24290       6.2 2010.\n 3 Dallas  2010     6  4658 1055526309 166700    26812       6.7 2010.\n 4 Dallas  2010     3  4082  824662535 156800    24125       6.3 2010.\n 5 Dallas  2010     8  3476  738748272 164900    27346       7.2 2011.\n 6 Dallas  2010     7  3363  782294206 167800    27709       7.2 2010.\n 7 Dallas  2010    12  3215  743761990 161900    22557       6.4 2011.\n 8 Dallas  2010     9  3151  651529718 155200    26745       7.2 2011.\n 9 Dallas  2010    10  2977  606133350 154100    25688       7.1 2011.\n10 Dallas  2010    11  2795  608685059 154900    24254       6.8 2011.\n11 Dallas  2010     2  2774  548903564 149800    22991       6.1 2010.\n12 Dallas  2010     1  2210  420140118 140800    21825       5.7 2010 \n\n\n\n# 7) Sometimes metrics like home sales have a seasonal quality to them, much like \n# retail sales. There are times of year that are naturally more active, and others where\n# it's slower.\n# That means sometimes you'll want to isolate the same time period across multiple years\n# to compare how it went based on similar times of year.\n# Let's do that here: we're going to look only for sales that happened in the month of JUNE.\n#\n# Filter for the city is Dallas, and the month is June (the number 6). \n\nDJ=filter(housesales, city == \"Dallas\", month == 6)\nfilter(housesales, city == \"Dallas\", month == 6)\n\n# A tibble: 16 × 9\n   city    year month sales     volume median listings inventory  date\n   <chr>  <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Dallas  2000     6  4738  846254912 138800    14392       3.8 2000.\n 2 Dallas  2001     6  5065  941310414 146300    18372       4.8 2001.\n 3 Dallas  2002     6  4423  817899695 148400    22043       5.6 2002.\n 4 Dallas  2003     6  4847  920352540 154000    27169       6.9 2003.\n 5 Dallas  2004     6  5511 1134082858 159300    28725       6.6 2004.\n 6 Dallas  2005     6  6416 1352136392 158900    28875       6.1 2005.\n 7 Dallas  2006     6  7117 1546598624 163400    30323       5.8 2006.\n 8 Dallas  2007     6  6207 1432055051 169100    33624       6.4 2007.\n 9 Dallas  2008     6  5180 1134394581 164400    30340       6.6 2008.\n10 Dallas  2009     6  4691 1001824336 166600    24677       6.5 2009.\n11 Dallas  2010     6  4658 1055526309 166700    26812       6.7 2010.\n12 Dallas  2011     6  4541 1009183879 165700    23968       7.2 2011.\n13 Dallas  2012     6  5196 1209024869 177900    17587       4.6 2012.\n14 Dallas  2013     6  5981 1593190134 202800    13339       2.9 2013.\n15 Dallas  2014     6  6309 1703805588 217100    12432       2.5 2014.\n16 Dallas  2015     6  6532 1960556658 242300    11014       2.2 2015.\n\n# 8) Build on what we've done above. Now that we have June numbers for Dallas for every year,\n# arrange the results by sales from highest-to-lowest to show what year had the highest June sales.\n\narrange(DJ, desc(sales))\n\n# A tibble: 16 × 9\n   city    year month sales     volume median listings inventory  date\n   <chr>  <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n 1 Dallas  2006     6  7117 1546598624 163400    30323       5.8 2006.\n 2 Dallas  2015     6  6532 1960556658 242300    11014       2.2 2015.\n 3 Dallas  2005     6  6416 1352136392 158900    28875       6.1 2005.\n 4 Dallas  2014     6  6309 1703805588 217100    12432       2.5 2014.\n 5 Dallas  2007     6  6207 1432055051 169100    33624       6.4 2007.\n 6 Dallas  2013     6  5981 1593190134 202800    13339       2.9 2013.\n 7 Dallas  2004     6  5511 1134082858 159300    28725       6.6 2004.\n 8 Dallas  2012     6  5196 1209024869 177900    17587       4.6 2012.\n 9 Dallas  2008     6  5180 1134394581 164400    30340       6.6 2008.\n10 Dallas  2001     6  5065  941310414 146300    18372       4.8 2001.\n11 Dallas  2003     6  4847  920352540 154000    27169       6.9 2003.\n12 Dallas  2000     6  4738  846254912 138800    14392       3.8 2000.\n13 Dallas  2009     6  4691 1001824336 166600    24677       6.5 2009.\n14 Dallas  2010     6  4658 1055526309 166700    26812       6.7 2010.\n15 Dallas  2011     6  4541 1009183879 165700    23968       7.2 2011.\n16 Dallas  2002     6  4423  817899695 148400    22043       5.6 2002.\n\n\n\n9) Now do the same as Question 8, but this time instead of Dallas, show results for Corpus Christi\nCC=filter(housesales, city == “Corpus Christi”, month == 6) filter(housesales, city == “Corpus Christi”, month == 6) arrange(CC, desc(sales))\n\n\n10) Finally, using the Corpus Christi code from Question 9, instead of June\n\n\nuse the month of February (2) instead.\nCC=filter(housesales, city == “Corpus Christi”, month == 2) filter(housesales, city == “Corpus Christi”, month == 2) arrange(CC, desc(sales))"
  },
  {
    "objectID": "VA Analysis.html",
    "href": "VA Analysis.html",
    "title": "VA Analysis",
    "section": "",
    "text": "Comparing Virgnia Gov vs. Prez\n\n#Using the DT package, we will transform the Virginia voting data csv file into a more digestible paginated table through the 'datatable' function. \n\njoined_vacomparison <- read.csv(\"joined_vacomparison.csv\") \n\nDT::datatable(joined_vacomparison)\n\n\n\n\n\n\n\n#Although the table displays a lot of information on each candidate's success, it does not show any direct comparisons among them. Using tidyverse's 'mutate()' function, I will form and new data column that will demonstrate the margin between Youngkin's and Trump's percentage. Positive values demonstrate that Youngkin performed better in a specific county than Trump while negatives indicate that he performed weaker in the same locality. \n\nRmargin= mutate(joined_vacomparison, YoungkinMarg= pct_youngkin-trump_pct) \nDT::datatable(Rmargin)\n\n\n\n\n\n#Using the 'head()' function, I will trim the data to only show Youngkin's top five counties in terms of his margin with Trump. \n\nTop5 <- arrange(Rmargin, desc(YoungkinMarg)) \nTop5county <- head(Top5,5) \nDT::datatable(Top5county)\n\n\n\n\n\n#Finally, after focusing in on the specific data points we want, I will use ggplot's charting function to visualize Youngkin's best performances in a bar chart. This chart was created through the use of 'reorder()', in which I graphed his margin in respect to localities. \n\nggplot(Top5county, aes(x=reorder(locality, YoungkinMarg), y=YoungkinMarg)) + geom_bar(stat = \"identity\", color = \"black\", fill = \"blue\") + coord_flip()\n\n\n\n\n\n# After seeing where Youngkin outperformed Trump, I want to see the counties in which he personally saw the most success. This data only represents the counties where he received the highest percentage of votes and is not related to how Trump or any other candidate performed previously. Using the same process as with the margin section, I first apply 'mutate()' to form a new column, trim the top 5 through'head()', and then visualize the findings through ggplots 'geom_bar'. \n\nYoungkinSenate <- arrange(joined_vacomparison, desc(pct_youngkin)) \nYoungkin5 <- head(YoungkinSenate, 5) \nDT::datatable(Youngkin5)\n\n\n\n\n\nggplot(Youngkin5, aes(x=reorder(locality, pct_youngkin), y=pct_youngkin)) + geom_bar(stat = \"identity\", color = \"black\", fill = \"blue\") + coord_flip()\n\n\n\n\n\n#Now let's look at Youngkin's Democratic opponent, McAullife. First we will mutate the datatable and isolate his top 5 counties. We will then display his success in these counties through a DT 'datatable()' function.\n\nMcCauliffe <- arrange(joined_vacomparison, desc(pct_mcauliffe))\nMC5 <- head(McCauliffe, 5) \nDT::datatable(MC5)\n\n\n\n\n\n\n\n#The first of my personal findings relates to the presidential election. I was curious to see where Biden outperformed Trump and to what extent his margin of victory was. Using the same process as before, I trimmed his election data and displayed the top 5 in a datatable. \n\nPresElec= mutate(joined_vacomparison, BidenMarg = biden_pct-trump_pct) \nBiden5 <- arrange(PresElec, desc(BidenMarg)) \nBiden5county <- head(Biden5, 5) \nDT::datatable(Biden5county)\n\n\n\n\n\n\n\n#My second finding continues with the presidential election but is on Trump rather than Biden. While I previously calculated Biden's highest victory margins, for this section I wanted to graph pure Trump support. A similar process to calculating margins, this time however I focused purely on number of votes received and then graphed this through ggplot's geom_bar, using the 'reorder()' function. \n\ntrumpnumbers <- arrange(joined_vacomparison, desc(trump))\ntrump5 <- head(trumpnumbers, 5) \nggplot(trump5, aes(x=reorder(locality, trump), y=trump)) + geom_bar(stat = \"identity\", color = \"white\", fill = \"red\")\n\n\n\n\n\n#My final finding pertains to the division, or if there was any, within the Democratic camp. I wanted to see if McAuliffe received less support in the same counties than Biden did so I used 'mutate()' to calculate the percentage margin. I then isolated the 5 counties with the highest margin and displayed them in a ggplot bar chart. The negative values indicate the counties where McAuliffe received less vote percentage than Biden did in his election. \n\nDmargin <- mutate(joined_vacomparison, MCmarg= pct_mcauliffe-biden_pct) \nDmargincounty <- arrange(Dmargin, desc(MCmarg)) \nDmargin5 <- head(Dmargincounty, 5) \n\nDT::datatable(Dmargin5)\n\n\n\n\n\nggplot(Dmargin5, aes(x=reorder(locality, MCmarg), y=MCmarg)) +   \ngeom_bar(stat = \"identity\", color = \"black\", fill = \"blue\") +   \ncoord_flip()"
  }
]