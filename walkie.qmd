---
title: "Walkthrough"
editor: visual
---
Housing Sale Analysis
---
```{r}
#As always, we start off by librarying the packages we will use in our code. For this data set we will use tidyverse and lubridate. 
library(tidyverse)
library(lubridate)
```

```{r}
# We still start of with a simple table that visualizes the data in a table. Unlike the VA Analysis, we will be using tidyverse rather than DT package. 
housesales <- ggplot2::txhousing
housesales
```

```{r}
# Let's filter returns from a specific year. In this case, we will use the 'filter()' function in order to retrieve all sales from 2015.

filter(housesales, year == 2015)

# 2) And again but beginning in 2010. In order to capture this range, we use the 'between()' function within our filter and set the start as 2010 and the end as 2015. 

housesales %>%
  filter(between(year,2010,2015))
```


```{r}
# We can also filter categorical variables, in this case, the names of cities. We use the same code as we did with years, but substitute the city name in the place of the year.

housesales %>%
  filter(city == "Houston")

```

```{r}
# We can even filter quantitative and categorical variables. Here we add in two separate filters into our 'filter()', retrieving data only from Houston in 2010.

housesales %>%
  filter(city == "Houston", year == 2010)

```

```{r}
# In addition to gathering data through specific variable filters, we can also alter how the data we retrieve is displayed. By using 'arrange()' and telling the code what variable we want ordered through 'desc()', in this case, 'sales', we can get a descending list of more specific data. 

houston=filter(housesales, city == "Houston", year == 2010)
arrange(houston, desc(sales))

# And by switching out the initial location filter, formerly 'Houston', we can apply this filter to any other categorical variable in the dataset. 

dallas=filter(housesales, city == "Dallas", year == 2010)
arrange(dallas, desc(sales))

```

```{r}
# Due to the seasonal characteristic of real estate, some months see more action than others. If we wanted to get data that could demonstrate these fluctuations, we could once again input certain variables. Let's say we want to see data from Dallas but only in the month of June. Represented by its number (6), we input the variable into our 'filter()' function that already is filtering 'city="Dallas"'. 

DJ=filter(housesales, city == "Dallas", month == 6)
filter(housesales, city == "Dallas", month == 6)


# And once again we can display them in a certain order for a specific variable through desc(), in this case we input 'sales'.

arrange(DJ, desc(sales))

```

---
